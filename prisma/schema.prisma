// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             String   @id @default(uuid())
  email          String   @unique
  phoneNumber    String   @unique
  fullName       String
  password       String
  profilePicture String
  isVerified     Boolean  @default(false)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  chatMessagesSent  ChatMessage[] @relation("Sender")
  chatMessagesReceived ChatMessage[] @relation("Receiver")

  jobsApplied JobMarket[]

  notifications      Notification[]
  propertiesUploaded PropertyMarket[]
  apartmentsUploaded Property[]
  reminders          Reminder[]
  reports            Report[]
  reviews            Review[]
  searches           Search[]

  @@map("users")
}

model ChatMessage {
  id           Int       @id @default(autoincrement())

  sender        User     @relation("Sender", fields: [senderId], references: [id])
  senderId      String

  receiver      User     @relation("Receiver", fields: [receiverId], references: [id])
  receiverId    String
  
  message      String
  createdAt    DateTime  @default(now())
  isRead       Boolean   @default(false)
  isDelivered  Boolean   @default(false)
  
  @@map("chatMessages")
}

model Contact {
  id        Int     @id @default(autoincrement())
  firstName String
  lastName  String
  email     String
  message   String
  createdAt      DateTime @default(now())

  @@map("contacts")
}

model JobMarket {
  id                  Int          @id @default(autoincrement())

  user User?   @relation(fields: [userId], references: [id])
  userId String

  companyName         String
  jobTitle            String
  jobDescription      String
  keyResponsibilities String[]
  qualifications      String[]
  workArrangement     String
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
  applicationUrl      String
}

model Notification {
  id                Int      @id @default(autoincrement())

  userId             String
  user               User       @relation(fields: [userId], references: [id])

  message           String
  createdAt         DateTime @default(now())
  status            String
  type              String
  priority          String
  actionButtonLabel String?
  actionButtonLink  String?
  relatedResourceLink String?

  @@map("notifications")
}

model PropertyMarket {
  id          Int      @id @default(autoincrement())
  userId      String
  user        User     @relation(fields: [userId], references: [id])
  
  title       String
  description String
  price       Float
  images      String[]
  location    String
  createdAt   DateTime @default(now())

  @@map("propertyMarkets")
}

model Property {
  id                 Int      @id @default(autoincrement())
  userId             String
  user               User     @relation(fields: [userId], references: [id])
  
  category           String
  numberOfRooms      Int
  pictures           String[]
  mainPictureIndex   Int
  description        String
  state              String
  lga                String
  nearby             String[]
  amenities          String[]
  address            String
  createdAt          DateTime @default(now())

  @@map("properties")
}

model Reminder {
  id                     Int      @id @default(autoincrement())
  
  userId                 String
  user                   User     @relation(fields: [userId], references: [id])
  
  location               String
  time                   DateTime
  date                   DateTime
  note                   String
  appointmentContactNumber String
  status                 Boolean
  createdAt              DateTime @default(now())
  updatedAt              DateTime @updatedAt

  @@map("reminders")
}

model Report {
  id              Int     @id @default(autoincrement())
 
  userId          String
  user            User    @relation(fields: [userId], references: [id])
  
  reportCategory  String
  reportPriority  String
  createdAt       DateTime @default(now())

  @@map("reports")
}

model Review {
  id              Int     @id @default(autoincrement())
  
  userId          String
  user            User    @relation(fields: [userId], references: [id])
  
  rating          Int
  comment         String?
  propertyPictures String[]
  createdAt       DateTime @default(now())

  @@map("reviews")
}

model Search {
  id        Int      @id @default(autoincrement())
  
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  
  query     String
  timestamp DateTime @default(now())

  @@map("searches")
}
